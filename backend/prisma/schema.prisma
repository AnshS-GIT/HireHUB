generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}



model Student {
  id             String           @id @map("_id") @default(auto()) @db.ObjectId
  name           String
  email          String           @unique
  passwordHash   String
  branch         String?
  year           Int?
  cgpa           Float?
  resumeUrl      String?
  interestAreas  String[]
  createdAt      DateTime         @default(now())
  skills         StudentSkill[]
  codingProfiles CodingProfile[]
  applications   Application[]
  notifications  Notification[]
}

model Recruiter {
  id             String   @id @map("_id") @default(auto()) @db.ObjectId
  name           String
  email          String   @unique
  passwordHash   String
  companyName    String
  companyWebsite String?
  industry       String?
  role           String?
  logoUrl        String?
  jobs           Job[]
}

model Job {
  id                  String        @id @map("_id") @default(auto()) @db.ObjectId
  recruiter           Recruiter     @relation(fields: [recruiterId], references: [id])
  recruiterId         String
  title               String
  description         String
  eligibility         String?
  skillsRequired      String?
  salaryPackage       Float?
  applicationDeadline DateTime?
  status              String?       @default("open")
  applications        Application[]
  interviews          Interview[]   @relation("JobInterviews")
}

model Application {
  id          String       @id @map("_id") @default(auto()) @db.ObjectId
  job         Job          @relation(fields: [jobId], references: [id])
  jobId       String
  student     Student      @relation(fields: [studentId], references: [id])
  studentId   String
  status      String       @default("applied")
  appliedAt   DateTime     @default(now())
  interviews  Interview[]
}

model Interview {
  id            String       @id @map("_id") @default(auto()) @db.ObjectId
  application   Application  @relation(fields: [applicationId], references: [id])
  applicationId String
  job           Job          @relation("JobInterviews", fields: [jobId], references: [id])
  jobId         String
  interviewDate DateTime
  mode          String?
  locationOrLink String?
  status        String?      @default("scheduled")
  feedback      String?
}

model Skill {
  id      String        @id @map("_id") @default(auto()) @db.ObjectId
  name    String
  students StudentSkill[]
}

model StudentSkill {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  skill     Skill    @relation(fields: [skillId], references: [id])
  skillId   String
}

model CodingProfile {
  id             String   @id @map("_id") @default(auto()) @db.ObjectId
  student        Student  @relation(fields: [studentId], references: [id])
  studentId      String
  platformName   String
  username       String
  profileUrl     String?
  rating         Int?
  problemsSolved Int?
}

model Resource {
  id     String  @id @map("_id") @default(auto()) @db.ObjectId
  title  String
  type   String
  link   String
}

model Notification {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
